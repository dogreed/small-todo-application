@model small_todo_application.ViewModel.ChatViewModel
@using System.Security.Claims

@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    int currentUserId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
}

<div class="container py-4">
    <div class="d-flex align-items-center mb-4">
        <div class="avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3"
             style="width: 50px; height: 50px; font-size: 1.25rem;">
            @Model.FriendName.Substring(0, 1).ToUpper()
        </div>
        <h2 class="mb-0">Chat with @Model.FriendName</h2>
    </div>

    <input type="hidden" id="receiverId" value="@Model.FriendId" />

    <div id="messages" class="card border-0 shadow-sm mb-3" style="height: 400px; overflow-y: auto;">
        <div class="card-body p-3">
            @foreach (var message in Model.Messages)
            {
                <div class="mb-3 @(message.SenderId == currentUserId ? "text-end" : "text-start")">
                    <div class="d-flex @(message.SenderId == currentUserId ? "justify-content-end" : "justify-content-start")">
                        <div class="@(message.SenderId == currentUserId ? "bg-primary text-white" : "bg-light") rounded-3 p-3"
                             style="max-width: 70%;">
                            <div class="d-flex align-items-center mb-1">
                                <strong class="@(message.SenderId == currentUserId ? "text-white" : "")">
                                    @(message.SenderId == currentUserId ? "You" : Model.FriendName)
                                </strong>
                            </div>
                            <p class="mb-1">@message.Message</p>
                            <small class="@(message.SenderId == currentUserId ? "text-white-50" : "text-muted")">
                                @message.SentAt.ToShortTimeString()
                            </small>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="input-group">
        <input type="text" id="messageInput" class="form-control" placeholder="Type a message..." />
        <button class="btn btn-primary" onclick="sendMessage()">
            <i class="fas fa-paper-plane"></i> Send
        </button>
    </div>
</div>

<style>
    #messages {
        scroll-behavior: smooth;
    }

    .avatar {
        font-weight: 600;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/userChatHub")
        .build();

    const currentFriendId = parseInt(document.getElementById("receiverId").value);

    connection.on("ReceivePrivateMessage", (senderId, receiverId, message) => {
        if (senderId === currentFriendId || receiverId === currentFriendId) {
            const msgArea = document.getElementById("messages");
            const msg = document.createElement("div");
            msg.className = `mb-3 ${senderId === currentFriendId ? 'text-start' : 'text-end'}`;

            const bubble = document.createElement("div");
            bubble.className = `d-flex ${senderId === currentFriendId ? 'justify-content-start' : 'justify-content-end'}`;

            const content = document.createElement("div");
            content.className = `${senderId === currentFriendId ? 'bg-light' : 'bg-primary text-white'} rounded-3 p-3`;
            content.style.maxWidth = "70%";

            const senderName = senderId === currentFriendId ? "@Model.FriendName" : "You";
            content.innerHTML = `
                <div class="d-flex align-items-center mb-1">
                    <strong class="${senderId === currentFriendId ? '' : 'text-white'}">${senderName}</strong>
                </div>
                <p class="mb-1">${message}</p>
                <small class="${senderId === currentFriendId ? 'text-muted' : 'text-white-50'}">
                    ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </small>
            `;

            bubble.appendChild(content);
            msg.appendChild(bubble);
            msgArea.querySelector('.card-body').appendChild(msg);
            msgArea.scrollTop = msgArea.scrollHeight;
        }
    });

    async function sendMessage() {
        const receiverId = document.getElementById("receiverId").value;
        const message = document.getElementById("messageInput").value;
        if (message.trim() === '') return;

        await connection.invoke("SendPrivateMessage", parseInt(receiverId), message);
        document.getElementById("messageInput").value = '';
        document.getElementById("messageInput").focus();
    }

    // Send message on Enter key
    document.getElementById("messageInput").addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    connection.start().catch(err => console.error(err.toString()));
</script>